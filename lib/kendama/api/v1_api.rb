=begin
#国税庁API

#国税庁が提供するインボイス制度適格請求書発行事業者公表システムWeb-APIを使用するためのクライアントAPI(https://www.invoice-kohyo.nta.go.jp/web-api/index.html)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module Kendama
  class V1Api
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # 取得期間を指定して情報を取得
    # 取得期間を指定し、当該期間内に「更新年月日」が含まれる公表情報を取得
    # @param id [String] 
    # @param from [Date] 
    # @param to [Date] 
    # @param type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :division  (default to '1')
    # @option opts [String] :divide  (default to '1')
    # @return [ResponseBody]
    def get_announcement_by_diff(id, from, to, type, opts = {})
      data, _status_code, _headers = get_announcement_by_diff_with_http_info(id, from, to, type, opts)
      data
    end

    # 取得期間を指定して情報を取得
    # 取得期間を指定し、当該期間内に「更新年月日」が含まれる公表情報を取得
    # @param id [String] 
    # @param from [Date] 
    # @param to [Date] 
    # @param type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :division  (default to '1')
    # @option opts [String] :divide  (default to '1')
    # @return [Array<(ResponseBody, Integer, Hash)>] ResponseBody data, response status code and response headers
    def get_announcement_by_diff_with_http_info(id, from, to, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_announcement_by_diff ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.get_announcement_by_diff"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling V1Api.get_announcement_by_diff"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling V1Api.get_announcement_by_diff"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling V1Api.get_announcement_by_diff"
      end
      # verify enum value
      allowable_values = ["21"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      allowable_values = ["1", "2"]
      if @api_client.config.client_side_validation && opts[:'division'] && !allowable_values.include?(opts[:'division'])
        fail ArgumentError, "invalid value for \"division\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'divide'].nil? && opts[:'divide'].to_s.length > 999999
        fail ArgumentError, 'invalid value for "opts[:"divide"]" when calling V1Api.get_announcement_by_diff, the character length must be smaller than or equal to 999999.'
      end

      if @api_client.config.client_side_validation && !opts[:'divide'].nil? && opts[:'divide'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"divide"]" when calling V1Api.get_announcement_by_diff, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/1/diff'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'from'] = from
      query_params[:'to'] = to
      query_params[:'type'] = type
      query_params[:'division'] = opts[:'division'] if !opts[:'division'].nil?
      query_params[:'divide'] = opts[:'divide'] if !opts[:'divide'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.get_announcement_by_diff",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_announcement_by_diff\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 登録番号を指定して情報を取得
    # 指定された登録番号に係る登録年月日、取消年月日及び失効年月日に紐づく最新情報（履歴情報は任意）を取得
    # @param id [String] 
    # @param number [String] 
    # @param type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :history 
    # @return [ResponseBody]
    def get_announcement_by_number(id, number, type, opts = {})
      data, _status_code, _headers = get_announcement_by_number_with_http_info(id, number, type, opts)
      data
    end

    # 登録番号を指定して情報を取得
    # 指定された登録番号に係る登録年月日、取消年月日及び失効年月日に紐づく最新情報（履歴情報は任意）を取得
    # @param id [String] 
    # @param number [String] 
    # @param type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :history 
    # @return [Array<(ResponseBody, Integer, Hash)>] ResponseBody data, response status code and response headers
    def get_announcement_by_number_with_http_info(id, number, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_announcement_by_number ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.get_announcement_by_number"
      end
      # verify the required parameter 'number' is set
      if @api_client.config.client_side_validation && number.nil?
        fail ArgumentError, "Missing the required parameter 'number' when calling V1Api.get_announcement_by_number"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling V1Api.get_announcement_by_number"
      end
      # verify enum value
      allowable_values = ["21"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      allowable_values = ["0", "1"]
      if @api_client.config.client_side_validation && opts[:'history'] && !allowable_values.include?(opts[:'history'])
        fail ArgumentError, "invalid value for \"history\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/1/num'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'number'] = number
      query_params[:'type'] = type
      query_params[:'history'] = opts[:'history'] if !opts[:'history'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.get_announcement_by_number",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_announcement_by_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 登録番号と日付を指定して情報を取得
    # 登録番号及び指定された日付を基準日とした直近の登録年月日、取消年月日、失効年月日に紐づく情報を取得
    # @param id [String] 
    # @param number [String] 
    # @param day [Date] 
    # @param type [String] 
    # @param [Hash] opts the optional parameters
    # @return [ResponseBody]
    def get_announcement_by_valid(id, number, day, type, opts = {})
      data, _status_code, _headers = get_announcement_by_valid_with_http_info(id, number, day, type, opts)
      data
    end

    # 登録番号と日付を指定して情報を取得
    # 登録番号及び指定された日付を基準日とした直近の登録年月日、取消年月日、失効年月日に紐づく情報を取得
    # @param id [String] 
    # @param number [String] 
    # @param day [Date] 
    # @param type [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseBody, Integer, Hash)>] ResponseBody data, response status code and response headers
    def get_announcement_by_valid_with_http_info(id, number, day, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_announcement_by_valid ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.get_announcement_by_valid"
      end
      # verify the required parameter 'number' is set
      if @api_client.config.client_side_validation && number.nil?
        fail ArgumentError, "Missing the required parameter 'number' when calling V1Api.get_announcement_by_valid"
      end
      # verify the required parameter 'day' is set
      if @api_client.config.client_side_validation && day.nil?
        fail ArgumentError, "Missing the required parameter 'day' when calling V1Api.get_announcement_by_valid"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling V1Api.get_announcement_by_valid"
      end
      # verify enum value
      allowable_values = ["21"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/1/valid'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'number'] = number
      query_params[:'day'] = day
      query_params[:'type'] = type

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.get_announcement_by_valid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_announcement_by_valid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
