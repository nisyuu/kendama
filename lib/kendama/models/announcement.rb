=begin
#国税庁API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module Kendama
  class Announcement
    # 一連番号
    attr_accessor :sequence_number

    # 登録番号
    attr_accessor :registrated_number

    # 事業者処理区分
    attr_accessor :process

    # 訂正区分
    attr_accessor :correct

    # 人格区分
    attr_accessor :kind

    # 国内外区分
    attr_accessor :country

    # 最新履歴
    attr_accessor :latest

    # 登録年月日
    attr_accessor :registration_date

    # 更新年月日
    attr_accessor :update_date

    # 取消年月日
    attr_accessor :disposal_date

    # 失効年月日
    attr_accessor :expire_date

    # 本店又は主たる事務所の所在地（法人）
    attr_accessor :address

    # 本店又は主たる事務所の所在地都道府県コード（法人）
    attr_accessor :address_prefecture_code

    # 本店又は主たる事務所の所在地市区町村コード（法人）
    attr_accessor :address_city_code

    # 本店又は主たる事務所の所在地（公表申出）
    attr_accessor :address_request

    # 本店又は主たる事務所の所在地都道府県コード（公表申出）
    attr_accessor :address_request_prefecture_code

    # 本店又は主たる事務所の所在地市区町村コード（公表申出）
    attr_accessor :address_request_city_code

    # 日本語（カナ）
    attr_accessor :kana

    # 氏名又は名称
    attr_accessor :name

    # 国内において行う資産の譲渡等に係る事務所、事業所その他これらに準ずるものの所在地
    attr_accessor :address_inside

    # 国内において行う資産の譲渡等に係る事務所、事業所その他これらに準ずるものの所在地都道府県コード
    attr_accessor :address_inside_prefecture_code

    # 国内において行う資産の譲渡等に係る事務所、事業所その他これらに準ずるものの所在地市区町村コード
    attr_accessor :address_inside_city_code

    # 主たる屋号
    attr_accessor :trade_name

    # 通称・旧姓
    attr_accessor :popular_name_previous_name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'sequence_number' => :'sequenceNumber',
        :'registrated_number' => :'registratedNumber',
        :'process' => :'process',
        :'correct' => :'correct',
        :'kind' => :'kind',
        :'country' => :'country',
        :'latest' => :'latest',
        :'registration_date' => :'registrationDate',
        :'update_date' => :'updateDate',
        :'disposal_date' => :'disposalDate',
        :'expire_date' => :'expireDate',
        :'address' => :'address',
        :'address_prefecture_code' => :'addressPrefectureCode',
        :'address_city_code' => :'addressCityCode',
        :'address_request' => :'addressRequest',
        :'address_request_prefecture_code' => :'addressRequestPrefectureCode',
        :'address_request_city_code' => :'addressRequestCityCode',
        :'kana' => :'kana',
        :'name' => :'name',
        :'address_inside' => :'addressInside',
        :'address_inside_prefecture_code' => :'addressInsidePrefectureCode',
        :'address_inside_city_code' => :'addressInsideCityCode',
        :'trade_name' => :'tradeName',
        :'popular_name_previous_name' => :'popularName_previousName'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'sequence_number' => :'String',
        :'registrated_number' => :'String',
        :'process' => :'String',
        :'correct' => :'String',
        :'kind' => :'String',
        :'country' => :'String',
        :'latest' => :'String',
        :'registration_date' => :'Date',
        :'update_date' => :'Date',
        :'disposal_date' => :'String',
        :'expire_date' => :'String',
        :'address' => :'String',
        :'address_prefecture_code' => :'String',
        :'address_city_code' => :'String',
        :'address_request' => :'String',
        :'address_request_prefecture_code' => :'String',
        :'address_request_city_code' => :'String',
        :'kana' => :'String',
        :'name' => :'String',
        :'address_inside' => :'String',
        :'address_inside_prefecture_code' => :'String',
        :'address_inside_city_code' => :'String',
        :'trade_name' => :'String',
        :'popular_name_previous_name' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Kendama::Announcement` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Kendama::Announcement`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'sequence_number')
        self.sequence_number = attributes[:'sequence_number']
      end

      if attributes.key?(:'registrated_number')
        self.registrated_number = attributes[:'registrated_number']
      end

      if attributes.key?(:'process')
        self.process = attributes[:'process']
      end

      if attributes.key?(:'correct')
        self.correct = attributes[:'correct']
      end

      if attributes.key?(:'kind')
        self.kind = attributes[:'kind']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'latest')
        self.latest = attributes[:'latest']
      end

      if attributes.key?(:'registration_date')
        self.registration_date = attributes[:'registration_date']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'disposal_date')
        self.disposal_date = attributes[:'disposal_date']
      end

      if attributes.key?(:'expire_date')
        self.expire_date = attributes[:'expire_date']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'address_prefecture_code')
        self.address_prefecture_code = attributes[:'address_prefecture_code']
      end

      if attributes.key?(:'address_city_code')
        self.address_city_code = attributes[:'address_city_code']
      end

      if attributes.key?(:'address_request')
        self.address_request = attributes[:'address_request']
      end

      if attributes.key?(:'address_request_prefecture_code')
        self.address_request_prefecture_code = attributes[:'address_request_prefecture_code']
      end

      if attributes.key?(:'address_request_city_code')
        self.address_request_city_code = attributes[:'address_request_city_code']
      end

      if attributes.key?(:'kana')
        self.kana = attributes[:'kana']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'address_inside')
        self.address_inside = attributes[:'address_inside']
      end

      if attributes.key?(:'address_inside_prefecture_code')
        self.address_inside_prefecture_code = attributes[:'address_inside_prefecture_code']
      end

      if attributes.key?(:'address_inside_city_code')
        self.address_inside_city_code = attributes[:'address_inside_city_code']
      end

      if attributes.key?(:'trade_name')
        self.trade_name = attributes[:'trade_name']
      end

      if attributes.key?(:'popular_name_previous_name')
        self.popular_name_previous_name = attributes[:'popular_name_previous_name']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @sequence_number.nil?
        invalid_properties.push('invalid value for "sequence_number", sequence_number cannot be nil.')
      end

      if @sequence_number.to_s.length > 8
        invalid_properties.push('invalid value for "sequence_number", the character length must be smaller than or equal to 8.')
      end

      if @sequence_number.to_s.length < 1
        invalid_properties.push('invalid value for "sequence_number", the character length must be great than or equal to 1.')
      end

      if @registrated_number.nil?
        invalid_properties.push('invalid value for "registrated_number", registrated_number cannot be nil.')
      end

      if @process.nil?
        invalid_properties.push('invalid value for "process", process cannot be nil.')
      end

      if @correct.nil?
        invalid_properties.push('invalid value for "correct", correct cannot be nil.')
      end

      if @kind.nil?
        invalid_properties.push('invalid value for "kind", kind cannot be nil.')
      end

      if @country.nil?
        invalid_properties.push('invalid value for "country", country cannot be nil.')
      end

      if @latest.nil?
        invalid_properties.push('invalid value for "latest", latest cannot be nil.')
      end

      if @registration_date.nil?
        invalid_properties.push('invalid value for "registration_date", registration_date cannot be nil.')
      end

      if @update_date.nil?
        invalid_properties.push('invalid value for "update_date", update_date cannot be nil.')
      end

      if @disposal_date.nil?
        invalid_properties.push('invalid value for "disposal_date", disposal_date cannot be nil.')
      end

      if @expire_date.nil?
        invalid_properties.push('invalid value for "expire_date", expire_date cannot be nil.')
      end

      if @address.nil?
        invalid_properties.push('invalid value for "address", address cannot be nil.')
      end

      if @address.to_s.length > 600
        invalid_properties.push('invalid value for "address", the character length must be smaller than or equal to 600.')
      end

      if @address_prefecture_code.nil?
        invalid_properties.push('invalid value for "address_prefecture_code", address_prefecture_code cannot be nil.')
      end

      if @address_city_code.nil?
        invalid_properties.push('invalid value for "address_city_code", address_city_code cannot be nil.')
      end

      if @address_request.nil?
        invalid_properties.push('invalid value for "address_request", address_request cannot be nil.')
      end

      if @address_request.to_s.length > 600
        invalid_properties.push('invalid value for "address_request", the character length must be smaller than or equal to 600.')
      end

      if @address_request_prefecture_code.nil?
        invalid_properties.push('invalid value for "address_request_prefecture_code", address_request_prefecture_code cannot be nil.')
      end

      if @address_request_city_code.nil?
        invalid_properties.push('invalid value for "address_request_city_code", address_request_city_code cannot be nil.')
      end

      if @kana.nil?
        invalid_properties.push('invalid value for "kana", kana cannot be nil.')
      end

      if @kana.to_s.length > 500
        invalid_properties.push('invalid value for "kana", the character length must be smaller than or equal to 500.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length > 300
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 300.')
      end

      if @address_inside.nil?
        invalid_properties.push('invalid value for "address_inside", address_inside cannot be nil.')
      end

      if @address_inside.to_s.length > 300
        invalid_properties.push('invalid value for "address_inside", the character length must be smaller than or equal to 300.')
      end

      if @address_inside_city_code.nil?
        invalid_properties.push('invalid value for "address_inside_city_code", address_inside_city_code cannot be nil.')
      end

      if @trade_name.nil?
        invalid_properties.push('invalid value for "trade_name", trade_name cannot be nil.')
      end

      if @trade_name.to_s.length > 200
        invalid_properties.push('invalid value for "trade_name", the character length must be smaller than or equal to 200.')
      end

      if @popular_name_previous_name.nil?
        invalid_properties.push('invalid value for "popular_name_previous_name", popular_name_previous_name cannot be nil.')
      end

      if @popular_name_previous_name.to_s.length > 200
        invalid_properties.push('invalid value for "popular_name_previous_name", the character length must be smaller than or equal to 200.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @sequence_number.nil?
      return false if @sequence_number.to_s.length > 8
      return false if @sequence_number.to_s.length < 1
      return false if @registrated_number.nil?
      return false if @process.nil?
      return false if @correct.nil?
      return false if @kind.nil?
      return false if @country.nil?
      return false if @latest.nil?
      return false if @registration_date.nil?
      return false if @update_date.nil?
      return false if @disposal_date.nil?
      return false if @expire_date.nil?
      return false if @address.nil?
      return false if @address.to_s.length > 600
      return false if @address_prefecture_code.nil?
      return false if @address_city_code.nil?
      return false if @address_request.nil?
      return false if @address_request.to_s.length > 600
      return false if @address_request_prefecture_code.nil?
      return false if @address_request_city_code.nil?
      return false if @kana.nil?
      return false if @kana.to_s.length > 500
      return false if @name.nil?
      return false if @name.to_s.length > 300
      return false if @address_inside.nil?
      return false if @address_inside.to_s.length > 300
      return false if @address_inside_city_code.nil?
      return false if @trade_name.nil?
      return false if @trade_name.to_s.length > 200
      return false if @popular_name_previous_name.nil?
      return false if @popular_name_previous_name.to_s.length > 200
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] sequence_number Value to be assigned
    def sequence_number=(sequence_number)
      if sequence_number.nil?
        fail ArgumentError, 'sequence_number cannot be nil'
      end

      if sequence_number.to_s.length > 8
        fail ArgumentError, 'invalid value for "sequence_number", the character length must be smaller than or equal to 8.'
      end

      if sequence_number.to_s.length < 1
        fail ArgumentError, 'invalid value for "sequence_number", the character length must be great than or equal to 1.'
      end

      @sequence_number = sequence_number
    end

    # Custom attribute writer method with validation
    # @param [Object] address Value to be assigned
    def address=(address)
      if address.nil?
        fail ArgumentError, 'address cannot be nil'
      end

      if address.to_s.length > 600
        fail ArgumentError, 'invalid value for "address", the character length must be smaller than or equal to 600.'
      end

      @address = address
    end

    # Custom attribute writer method with validation
    # @param [Object] address_request Value to be assigned
    def address_request=(address_request)
      if address_request.nil?
        fail ArgumentError, 'address_request cannot be nil'
      end

      if address_request.to_s.length > 600
        fail ArgumentError, 'invalid value for "address_request", the character length must be smaller than or equal to 600.'
      end

      @address_request = address_request
    end

    # Custom attribute writer method with validation
    # @param [Object] kana Value to be assigned
    def kana=(kana)
      if kana.nil?
        fail ArgumentError, 'kana cannot be nil'
      end

      if kana.to_s.length > 500
        fail ArgumentError, 'invalid value for "kana", the character length must be smaller than or equal to 500.'
      end

      @kana = kana
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 300
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 300.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] address_inside Value to be assigned
    def address_inside=(address_inside)
      if address_inside.nil?
        fail ArgumentError, 'address_inside cannot be nil'
      end

      if address_inside.to_s.length > 300
        fail ArgumentError, 'invalid value for "address_inside", the character length must be smaller than or equal to 300.'
      end

      @address_inside = address_inside
    end

    # Custom attribute writer method with validation
    # @param [Object] trade_name Value to be assigned
    def trade_name=(trade_name)
      if trade_name.nil?
        fail ArgumentError, 'trade_name cannot be nil'
      end

      if trade_name.to_s.length > 200
        fail ArgumentError, 'invalid value for "trade_name", the character length must be smaller than or equal to 200.'
      end

      @trade_name = trade_name
    end

    # Custom attribute writer method with validation
    # @param [Object] popular_name_previous_name Value to be assigned
    def popular_name_previous_name=(popular_name_previous_name)
      if popular_name_previous_name.nil?
        fail ArgumentError, 'popular_name_previous_name cannot be nil'
      end

      if popular_name_previous_name.to_s.length > 200
        fail ArgumentError, 'invalid value for "popular_name_previous_name", the character length must be smaller than or equal to 200.'
      end

      @popular_name_previous_name = popular_name_previous_name
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          sequence_number == o.sequence_number &&
          registrated_number == o.registrated_number &&
          process == o.process &&
          correct == o.correct &&
          kind == o.kind &&
          country == o.country &&
          latest == o.latest &&
          registration_date == o.registration_date &&
          update_date == o.update_date &&
          disposal_date == o.disposal_date &&
          expire_date == o.expire_date &&
          address == o.address &&
          address_prefecture_code == o.address_prefecture_code &&
          address_city_code == o.address_city_code &&
          address_request == o.address_request &&
          address_request_prefecture_code == o.address_request_prefecture_code &&
          address_request_city_code == o.address_request_city_code &&
          kana == o.kana &&
          name == o.name &&
          address_inside == o.address_inside &&
          address_inside_prefecture_code == o.address_inside_prefecture_code &&
          address_inside_city_code == o.address_inside_city_code &&
          trade_name == o.trade_name &&
          popular_name_previous_name == o.popular_name_previous_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [sequence_number, registrated_number, process, correct, kind, country, latest, registration_date, update_date, disposal_date, expire_date, address, address_prefecture_code, address_city_code, address_request, address_request_prefecture_code, address_request_city_code, kana, name, address_inside, address_inside_prefecture_code, address_inside_city_code, trade_name, popular_name_previous_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Kendama.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
